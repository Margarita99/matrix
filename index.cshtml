@{
    
    public class DataItem
    {
        public int type;
        public String value;
        public DataItem Left;
        public DataItem Right;

        public DataItem(int type = 0, String value = "")
        {
            this.type = type;
            this.value = value;
        }

        public void add(int type, String value, bool left)
        {
            DataItem child = new DataItem();
            child.type = type;
            child.value = value;
            if (left) this.Left = child;
            else this.Right = child;
        }

        public void addleft(int type, String value = "")
        {
            this.add(type, value, true);
        }

        public void addright(int type, String value = "")
        {
            this.add(type, value, false);
        }

        public void add(DataItem child, bool left)
        {
            if (left) this.Left = child;
            else this.Right = child;
        }

        public void addleft(DataItem child)
        {
            this.add(child, true);
        }

        public void addright(DataItem child)
        {
            this.add(child, false);
        }
    }

    public static class ExSolver
    {
        public static double solve(DataItem expr, double x)
        {
            if (expr.type == 1)
            {
                return (solve(expr.Left, x) - solve(expr.Right, x));
            }
            else
                if (expr.type == 2)
                {
                    return (solve(expr.Left, x) + solve(expr.Right, x));
                }
                else
                    if (expr.type == 3)
                    {
                        return (solve(expr.Left, x) / solve(expr.Right, x));
                    }
                    else
                        if (expr.type == 4)
                        {
                            return (solve(expr.Left, x) * solve(expr.Right, x));
                        }
                        else
                            if (expr.type == 5)
                            {
                                return Math.Pow(solve(expr.Left, x), solve(expr.Right, x));
                            }
                            else
                                if (expr.type == 6)
                                {
                                    return Math.Sin(solve(expr.Right, x));
                                }
                                else
                                    if (expr.type == 7)
                                    {
                                        return Math.Cos(solve(expr.Right, x));
                                    }
                                    else
                                        if (expr.type == 8)
                                        {
                                            return Math.Tan(solve(expr.Right, x));
                                        }
                                        else
                                            if (expr.type == 9)
                                            {
                                                return Math.Tan(solve(expr.Right, x));
                                            }
                                            else
                                                if (expr.type == 0)
                                                {
                                                    String str = expr.value;
                                                    str = str.Replace(" ", "");
                                                    str = str.Replace("(", "");
                                                    str = str.Replace(")", "");
                                                    str = str.Replace("x", x.ToString());
                                                    double result;
                                                    try
                                                    {
                                                        result = Convert.ToDouble(str);
                                                    }
                                                    catch (FormatException e)
                                                    {
                                                        result = 0;
                                                        Console.WriteLine("Exception: unknown value '" + str + "', assuming as 0.");
                                                    }
                                                    return result;
                                                }

            return 0;
        }

        public static double[] solve(DataItem expr, double[] x)
        {
            double[] result = new double[1];
            Array.Resize<double>(ref result, x.Length);
            int i = 0;
            foreach (double _x in x)
            {
                result[i] = solve(expr, _x);
                i++;
            }
            return result;
        }

    }

    public static class ExParser
    {
        public static DataItem parse(String expr)
        {
            DataItem element = new DataItem();

            String opers = "-+/*^sctg";
            int pos = -1;

            for (int i = 0; i < opers.Length; i++)
            {
                pos = find(expr, opers[i]);
                if (pos >= 0)
                {
                    element.type = i + 1;
                    element.addleft(parse(expr.Substring(0, pos)));
                    element.addright(parse(expr.Substring(pos + 1)));
                    break;
                }
            }
            if (element.type == 0)
            {
                element.value = expr;
            }

            return element;
        }

        public static String prepare(String expr)
        {
            expr = expr.Replace("sin", "s");
            expr = expr.Replace("cos", "c");
            expr = expr.Replace("ctg", "g");
            expr = expr.Replace("tg", "t");
            expr = expr.Replace("pi", Math.PI.ToString());
            expr = expr.Replace(".", ",");
            return expr;
        }

        public static int find(String expr, char oper)
        {
            String opers = "-+/*^sctg";
            bool esc = false;
            int p = -1;
            int k = 0;
            do
            {
                p = expr.IndexOf(oper, p + 1);
                if (p < 0) return -1;
                esc = false;
                k = 0;
                for (int i = p; i >= 0; i--)
                {
                    if (expr[i] == ')') k -= 1;
                    if (expr[i] == '(') k += 1;
                    if (k == 1)
                    {
                        for (int j = i; j >= 0; j--)
                        {
                            for (int s = 0; s < opers.Length; s++)
                            {
                                if (expr[j] == opers[s]) esc = true;
                                if (esc) break;
                            }
                            if (esc) break;
                        }
                        if (esc) break;
                    }
                    if (esc) break;
                }

                if (esc) continue;
                k = 0;

                for (int i = p; i < expr.Length; i++)
                {
                    if (expr[i] == '(') k += 1;
                    if (expr[i] == ')') k -= 1;
                    if (k == -1)
                    {
                        for (int j = i; j < expr.Length; j++)
                        {
                            for (int s = 0; s < opers.Length; s++)
                            {
                                if (expr[j] == opers[s]) esc = true;
                                if (esc) break;
                            }
                            if (esc) break;
                        }
                        if (esc) break;
                        else return p;
                    }
                    if (esc) break;
                }
                if (k == 0) return p;
            } while (p >= 0);
            return 0;
        }
    }







    class Program
    {
        const double P_H=0.5;

        static double factorial(int Fact)
        {
            if (Fact == 1) return 1;
            return factorial(Fact - 1) * Fact; 
        }


        static void Main(string[] args)
        {
            Console.WriteLine("Я считаю...");
            string n;
            int N;
            int m = 3;
            System.Console.Write("N = ");
            n = System.Console.ReadLine();
            N = Convert.ToInt32(n);
            int P = 170;
            double h = P_H;
            double KFakt;
            double koaffic;
            double[,] A = new double[N, N];
            string[,] AS = new string[N, N];
            double[,] E = new double[N, N];
            double[,] ExpA = new double[N, N];
            double[,] Ak = new double[N, N];
            double[,] Akn = new double[N, N];
            double[,] C = new double[N, N];
            double[,] Ck = new double[N, N];
            double[] x = new double[m];

            x[0] = -h;
            for (int w = 1; w < m; w++)
            {
                x[w] = x[w-1] + h;
            }


            for (int w = 1; w < m; w++)
            {
                Console.Write(x[w] + "\t");
            }


            for (int j = 0; j < N; j++)
            {
                for (int r = 0; r < N; r++)
                {
                    if (j == r)
                    {
                        E[j, r] = 1;
                    }
                    else
                    {
                        E[j, r] = 0;
                    }
                }
            }


            for (int j = 0; j < N; j++)
            {
                for (int r = 0; r < N; r++)
                {
                    Ck[j, r] = E[j, r];
                }
            }


           


            for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < N; j++)
                {
                    Console.Write("AS[" + i + "," + j + "]: ");
                    AS[i, j] = Console.ReadLine();
                }
            }
            Console.WriteLine();



            for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < N; j++)
                {
                    Console.Write(" AS[" + i + "," + j + "]: " + AS[i, j] + "\t");
                }
                Console.WriteLine();
            }


           //Заполние матрицы A 
           /* for (int i = 0; i < N; i++)
            {
                for (int j = 0; j < N; j++)
                {
                    Console.Write("A[" + i + "," + j + "]: ");
                    A[i, j] = int.Parse(Console.ReadLine());
                }
            }
            Console.WriteLine();*/




            for (int w = 1; w < m; w++)
            {
                for (int i = 0; i < N; i++)
                {
                    for (int j = 0; j < N; j++)
                    {
                        A[i, j] = ExSolver.solve(ExParser.parse(ExParser.prepare(AS[i, j])), x[w]);
                        Console.Write(" A[" + i + "," + j + "]: " + A[i, j] + "\t");
                    }
                }


                for (int i = 0; i < N; i++)
                {
                    for (int j = 0; j < N; j++)
                    {
                        Console.Write(" A[" + i + "," + j + "]: " + A[i, j] + "\t");
                    }
                }

                /*
                for (int w = 0; w < m; w++)
                {
                    for (int i = 0; i < N; i++)
                    {
                        for (int j = 0; j < N; j++)
                        {

                            Console.Write(" A[" + i + "," + j + "]: " + A[i, j] + "\t");
                        }
                    }
                 }
                Console.WriteLine();*/



                for (int i = 0; i < P; i++)
                {
                    if (i % 1 == 0)
                    {

                        Console.WriteLine((i / 10) + "% готово");
                        //Console.ReadKey();
                        for (int j = 0; j < N; j++)
                        {
                            for (int r = 0; r < N; r++)
                            {
                                Console.Write(ExpA[j, r] + " ");
                            }
                            Console.WriteLine();
                        }
                    }
                    if (i == 0)
                    {
                        for (int j = 0; j < N; j++)
                        {
                            for (int r = 0; r < N; r++)
                            {
                                ExpA[j, r] = E[j, r];
                            }
                        }
                        continue;
                    } else if (i == 1)
                    {
                        for (int j = 0; j < N; j++)
                        {
                            for (int r = 0; r < N; r++)
                            {
                                Ak[j, r] = A[j, r];
                            }
                        }
                    }
                    else
                    {
                        for (int j = 0; j < N; j++)
                        {
                            for (int r = 0; r < N; r++)
                            {
                                for (int s = 0; s < N; s++)
                                {
                                    Akn[j, r] += Ak[j, s] * A[s, r];
                                }
                            }
                        }
                        for (int j = 0; j < N; j++)
                        {
                            for (int r = 0; r < N; r++)
                            {
                                Ak[j, r] = Akn[j, r];
                            }
                        }
                    }
                    h = P_H;
                    h = Math.Pow(h, i);

                    KFakt = factorial(i);

                    koaffic = h / KFakt;

                    Console.WriteLine(koaffic + " " + KFakt + " " + h);
                    for (int j = 0; j < N; j++)
                    {
                        for (int r = 0; r < N; r++)
                        {
                            ExpA[j, r] += koaffic*Ak[j, r];
                        }
                    }
                }
                for (int j = 0; j < N; j++)
                {
                    for (int r = 0; r < N; r++)
                    {
                        Console.Write(ExpA[j, r] + " ");
                    }
                    Console.WriteLine();
                }


                for (int j = 0; j < N; j++)
                {
                    for (int r = 0; r < N; r++)
                    {
                        for (int s = 0; s < N; s++)
                        {
                            C[j, r] += ExpA[j, s] * Ck[s, r];
                        }
                    }
                }
                for (int j = 0; j < N; j++)
                {
                    for (int r = 0; r < N; r++)
                    {
                        Ck[j, r] = C[j, r];
                    }
                }

            }
            Console.WriteLine();

            for (int j = 0; j < N; j++)
            {
                for (int r = 0; r < N; r++)
                {
                    Console.Write(" C[" + j + "," + r + "]:" + C[j, r] + " ");
                }
            }

            Console.ReadKey();
        }
    }

    
}

Time: 